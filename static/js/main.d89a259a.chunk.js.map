{"version":3,"sources":["components/Scanner/index.js","components/Piece/index.js","components/IngredientList/index.js","components/Complete/CraftingTable/Dropdown/index.js","components/Complete/CraftingTable/index.js","components/Complete/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Scanner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyPress","event","key","onSubmit","state","input","setState","handleChange","target","value","react_default","a","createElement","type","onChange","autoFocus","ocus","Component","Piece","IngredientList","ingredients","map","ingredient","components_Piece","Dropdown","preventDefault","correctSolution","toLowerCase","id","options","option","refIngredients","quantity","CraftingTable","isSolved","newStateFields","fields","field","solved","filter","length","console","log","solution","_this2","role","aria-label","className","CraftingTable_Dropdown","Complete","components_Complete_CraftingTable","goals","complete","barcode","App","handleSubmit","found","newState","statedGoals","goal","notify","show","shouldClear","components_Complete","notify_default","components_IngredientList","components_Scanner","React","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d89a259a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Scanner extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\"\n    }\n  }\n\n  onKeyPress = (event) => {\n    if(event.key === \"Enter\") {\n      this.props.onSubmit(this.state.input);\n      this.setState({\n        input: \"\"\n      });\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  render() {\n    return (\n      <input \n      type=\"text\" \n      onKeyPress={this.onKeyPress} \n      onChange={this.handleChange} \n      value={this.state.input}\n      autoFocus\n      ocus/>\n    )\n  }\n}\n\nexport default Scanner;","import  React  from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction Piece(props) {\n  return (\n    <p>{props.type}</p>\n  )\n}\n\nPiece.propTypes = {\n  type: PropTypes.string.isRequired\n}\n\nexport default Piece;","import React from 'react';\nimport * as PropTypes from 'prop-types'\nimport Piece from '../Piece';\n\nfunction IngredientList(props) {\n  return (\n    <div>\n      <ul>\n        {props.ingredients.map((ingredient) => {\n          return (\n            <li>\n              <Piece type={ingredient.type} />\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nIngredientList.propTypes = {\n  ingredients: PropTypes.arrayOf(PropTypes.shape({ type: PropTypes.string.isRequired}))\n}\n\nexport default IngredientList;","import React, { Component } from 'react';\nimport * as PropTypes from 'prop-types'\n\n\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    }\n  }\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      value: event.target.value\n    });\n    this.props.onChange((this.props.correctSolution.toLowerCase() === event.target.value.toLowerCase()), this.props.id);\n  }\n\n  render() {\n    return (\n      <div>\n        <select\n          value={this.state.value}\n          onChange={this.handleChange}\n        >\n          {this.props.options.map((option) => <option key={option}>{option}</option>)}\n        </select>\n      </div>\n    )\n  }\n}\n\nDropdown.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string),\n  correctSolution: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n}\n\nexport default Dropdown\n","import React, { Component } from 'react';\nimport './index.css';\nimport Dropdown from './Dropdown';\n\nlet refIngredients = [\n  {\n    type: 'milk',\n    quantity: 3\n  },\n  {\n    type: 'sugar',\n    quantity: 2\n  },\n  {\n    type: 'egg',\n    quantity: 1\n  },\n  {\n    type: 'wheat',\n    quantity: 3\n  }\n]\n\nclass CraftingTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ingredients: refIngredients,\n      solved: false,\n      fields: [\n        {\n          id: 'milk1',\n          solution: 'milk',\n          solved: false\n        },\n        {\n          id: 'milk2',\n          solution: 'milk',\n          solved: false\n        },\n        {\n          id: 'milk3',\n          solution: 'milk',\n          solved: false\n        },\n        {\n          id: 'sugar1',\n          solution: 'sugar',\n          solved: false\n        },\n        {\n          id: 'egg1',\n          solution: 'egg',\n          solved: false\n        },\n        {\n          id: 'sugar2',\n          solution: 'sugar',\n          solved: false\n        },\n        {\n          id: 'wheat1',\n          solution: 'wheat',\n          solved: false\n        },\n        {\n          id: 'wheat2',\n          solution: 'wheat',\n          solved: false\n        },\n        {\n          id: 'wheat3',\n          solution: 'wheat',\n          solved: false\n        }\n      ]\n    }\n  }\n\n  onChange = (isSolved, id) => {\n    if(!isSolved) return;\n    let newStateFields = this.state.fields.map((field) => {\n      if(field.id !== id) return field;\n      field.solved = field.id === id\n      // field.solved = true;\n      return field;\n    });\n    this.setState({\n      fields: newStateFields,\n      solved: this.state.fields.filter((field) => field.solved).length === this.state.fields.length\n    });\n    console.log(this.state.fields)\n  }\n\n  render() {\n    if (this.state.solved) return <h1>\n      <span role=\"img\" aria-label=\"party_emojis\">🎉🎉🎉</span> \n      You've escaped, congrats! \n      <span role=\"img\" aria-label=\"party_emojis\">🎉🎉🎉</span>\n      </h1>\n    return (\n      <div className=\"grid\">\n        {\n          this.state.fields.map((field) => (\n            <div className=\"grid-element\" key={field.id}>\n              <Dropdown\n                className=\"options\"\n                onChange={this.onChange}\n                options={['----', 'Egg', 'Wheat', 'Milk', 'Sugar']}\n                correctSolution={field.solution}\n                id={field.id}\n              />\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default CraftingTable;","import React from 'react';\nimport CraftingTable from './CraftingTable';\n\nfunction Complete(props) {\n  return(\n    <div>\n      <h2>Nice job!</h2>\n      <p>You've found all of the ingredients to bake the cake!</p>\n      <p>Now you need to craft it. Each ---- is a dropdown. Select the correct ingredient in each area to continue.</p>\n      <CraftingTable />\n    </div>\n  )\n}\n\nexport default Complete;","import React from 'react';\nimport Notifications, { notify } from 'react-notify-toast'\nimport './App.css';\nimport Scanner from '../Scanner'\nimport IngredientList from '../IngredientList';\nimport Complete from '../Complete';\n\nlet goals = [\n  {\n    id: 0,\n    complete: false,\n    barcode: \"7906603465\",\n    type: \"milk\"\n  },\n  {\n    id: 1,\n    complete: false,\n    barcode: \"3195047930\",\n    type: \"milk\"\n  },\n  {\n    id: 2,\n    complete: false,\n    barcode: \"0638093149\",\n    type: \"milk\"\n  },\n  {\n    id: 3,\n    complete: false,\n    barcode: \"5392062314\",\n    type: \"sugar\"\n  },\n  {\n    id: 4,\n    complete: false,\n    barcode: \"5310771690\",\n    type: \"egg\"\n  },\n  {\n    id: 5,\n    complete: false,\n    barcode: \"0054532206\",\n    type: \"sugar\"\n  },\n  {\n    id: 6,\n    complete: false,\n    barcode: \"5626998489\",\n    type: \"wheat\"\n  },\n  {\n    id: 7,\n    complete: false,\n    barcode: \"9926315950\",\n    type: \"wheat\"\n  },\n  {\n    id: 8,\n    complete: false,\n    barcode: \"5889559461\",\n    type: \"wheat\"\n  }\n]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      statedGoals: goals,\n      shouldClear: false,\n      complete: false\n    }\n  }\n\n  handleSubmit = (input) => {\n    let found = false;\n    const newState = this.state.statedGoals.map((goal) => {\n      if(goal.barcode !== input) return goal;\n      if(goal.complete === true) {\n        notify.show(\"You've already scanned that \" + goal.type + \".\", \"error\", 1500);\n      } else {\n        goal.complete = true;\n        notify.show(\"Nice job finding that \" + goal.type + \"!\", \"success\", 1500);\n      }\n      found = true;\n      return goal;\n    })\n    this.setState({\n      statedGoals: newState,\n      shouldClear: true,\n      complete: (newState.filter((goal) => goal.complete).length === newState.length)\n    });\n    if(found === false) notify.show(\"That's not a barcode in this game.\", \"warning\", 1500);\n  }\n\n  render() {\n    if(this.state.complete === true) {\n      return <Complete />;\n    }\n    return (\n      <div className=\"App\">\n        <Notifications />\n        <h1>Escape!</h1>\n        <p>Scan barcodes to unlock things. So far, you've unlocked:</p>\n        <p>(if the barcode reader isn't working, click on the text box below the list and and try again)</p>\n        <IngredientList ingredients={this.state.statedGoals.filter((goal) => goal.complete === true)}/>\n        <Scanner onSubmit={this.handleSubmit} shouldClear={this.state.shouldClear}></Scanner>\n      </div>\n    );\n  }     \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}